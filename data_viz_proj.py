# -*- coding: utf-8 -*-
"""Data_Viz_Proj.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o8JWDRhBC1h5DF3AEss4RqMsclfNkly4
"""

import pandas as pd

url1 = 'https://github.com/newzealandpaul/Maritime-Pirate-Attacks/blob/main/data/csv/pirate_attacks.csv?raw=true'
url2 = 'https://github.com/newzealandpaul/Maritime-Pirate-Attacks/blob/main/data/csv/country_indicators.csv?raw=true'
url3 = 'https://github.com/newzealandpaul/Maritime-Pirate-Attacks/blob/main/data/csv/country_codes.csv?raw=true'

pirate_attacks = pd.read_csv(url1)
country_indicators = pd.read_csv(url2)
country_codes = pd.read_csv(url3)

pirate_attacks.head(5)

country_indicators.head(5)

country_codes.head(5)

pirate_attacks.info()

# Count NaN values in each column of pirate_attacks
nan_counts = pirate_attacks.isnull().sum()
nan_counts

pirate_attacks['attack_type'].unique()

x= "Boarded"
y= "Boarding"
pirate_attacks['attack_type'] = pirate_attacks['attack_type'].replace(x, y)
pirate_attacks['attack_type'].unique()

pirate_attacks['vessel_type'].value_counts().sum()

country_codes.info(),country_indicators.info()

# Preprocess the pirate attacks dataset
pirate_attacks['date'] = pd.to_datetime(pirate_attacks['date'], errors='coerce')  # Convert to datetime
pirate_attacks = pirate_attacks.dropna(subset=['longitude', 'latitude', 'date'])  # Drop rows with missing critical values
pirate_attacks['year'] = pirate_attacks['date'].dt.year  # Extract year

# Filter for a meaningful timeline (1990 to 2020)
pirate_attacks = pirate_attacks[(pirate_attacks['year'] >= 1990) & (pirate_attacks['year'] <= 2020)]



import plotly.express as px
import pandas as pd
import numpy as np
from matplotlib import cm

# Preprocess the dataset
pirate_attacks['date'] = pd.to_datetime(pirate_attacks['date'], errors='coerce')
pirate_attacks = pirate_attacks.dropna(subset=['latitude', 'longitude', 'date'])
pirate_attacks['year'] = pirate_attacks['date'].dt.year
pirate_attacks = pirate_attacks[(pirate_attacks['year'] >= 1990) & (pirate_attacks['year'] <= 2020)]

# Ensure all attack types are represented for every year
all_years = pirate_attacks['year'].unique()
all_attack_types = pirate_attacks['attack_type'].unique()
full_combinations = pd.MultiIndex.from_product(
    [all_years, all_attack_types], names=["year", "attack_type"]
).to_frame(index=False)

# Merge with the dataset to include all combinations
pirate_attacks_full = pd.merge(
    full_combinations,
    pirate_attacks,
    on=["year", "attack_type"],
    how="left"
)

# Fill missing data for visualization purposes
pirate_attacks_full['latitude'] = pirate_attacks_full['latitude'].fillna(np.random.uniform(-5, 5))  # Random latitude
pirate_attacks_full['longitude'] = pirate_attacks_full['longitude'].fillna(np.random.uniform(50, 60))  # Random longitude
pirate_attacks_full['date'] = pirate_attacks_full['date'].fillna(pd.Timestamp("1990-01-01"))

# Slightly jitter coordinates to handle overlaps
pirate_attacks_full['latitude'] += np.random.uniform(-0.05, 0.05, pirate_attacks_full.shape[0])
pirate_attacks_full['longitude'] += np.random.uniform(-0.05, 0.05, pirate_attacks_full.shape[0])

# Generate perceptually uniform colors from Viridis palette
viridis = cm.get_cmap('plasma', len(all_attack_types))
color_scale = {attack_type: f"rgba({int(viridis(i)[0]*255)}, {int(viridis(i)[1]*255)}, {int(viridis(i)[2]*255)}, 1)"
               for i, attack_type in enumerate(all_attack_types)}

# Dynamically check for optional columns
hover_data = {"date": True, "attack_type": True}
if 'location_description' in pirate_attacks_full.columns:
    hover_data["location_description"] = True
if 'vessel_type' in pirate_attacks_full.columns:
    hover_data["vessel_type"] = True
if 'shore_distance' in pirate_attacks_full.columns:
    hover_data["shore_distance"] = True

# Create an interactive map with adjustable marker size
pirate_attacks_full['size'] = 10  # Uniform size for markers
fig = px.scatter_mapbox(
    pirate_attacks_full,
    lat="latitude",
    lon="longitude",
    color="attack_type",
    size="size",  # Set uniform or scaled size
    hover_name="location_description" if 'location_description' in pirate_attacks_full.columns else None,
    hover_data=hover_data,
    animation_frame="year",  # Add timeline slider for year
    title="Interactive Somali Pirate Attacks Map (1990-2020)",
    zoom=3,
    height=800,
    size_max=9,  # Adjust marker size globally
    opacity=0.7,  # Increase marker transparency for overlapping points
    color_discrete_map=color_scale,  # Perceptually uniform color scale
)

# Use a darker map theme
fig.update_layout(
    mapbox_style="carto-positron",  # Darker map theme
    mapbox_center={"lat": 5, "lon": 55},
)

# Add additional layout customization
fig.update_layout(
    legend_title="Attack Type",
    margin={"r": 0, "t": 50, "l": 0, "b": 0},
    coloraxis_colorbar={"title": "Attack Type"},
)

# Display the map
fig.show()

import pandas as pd
import plotly.graph_objects as go

# Data from the image (in US$ millions)
ransom_data = pd.DataFrame({
    'year': [2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012],
    'low_estimate': [1.57, 0.39, 1.03, 7.05, 20.20, 32.68, 84.42, 36.35],
    'high_estimate': [2.00, 0.40, 1.50, 8.00, 25.00, 57.16, 151.10, 40.39]
})

# Calculate average ransom
ransom_data['average_ransom'] = ransom_data[['low_estimate', 'high_estimate']].mean(axis=1)

# 1. Bar Chart: Annual Ransom Amounts
fig1 = go.Figure()
fig1.add_trace(go.Bar(
    x=ransom_data['year'], y=ransom_data['low_estimate'], name='Low Estimate',
    marker_color='blue'
))
fig1.add_trace(go.Bar(
    x=ransom_data['year'], y=ransom_data['high_estimate'], name='High Estimate',
    marker_color='orange'
))
fig1.update_layout(
    title='Evolution of Ransoms: Annual Amounts Collected by Somali Pirates (2005-2012)',
    xaxis_title='Year',
    yaxis_title='Ransom Amount (US$ millions)',
    barmode='group',
    template='plotly_white'
)

# 2. Line Chart: Average Ransom Amount
fig2 = go.Figure()
fig2.add_trace(go.Scatter(
    x=ransom_data['year'], y=ransom_data['average_ransom'], mode='lines+markers',
    name='Average Ransom', line=dict(color='green', width=3), marker=dict(size=8)
))
fig2.update_layout(
    title='Average Ransom Collected by Somali Pirates (2005-2012)',
    xaxis_title='Year',
    yaxis_title='Average Ransom Amount (US$ millions)',
    template='plotly_white'
)

# Show the visualizations
fig1.show()
fig2.show()

